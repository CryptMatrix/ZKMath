#Testing macro
macro (add_test_executable_with_lib folder _name)
	add_executable(test_${folder}_${_name} "${folder}/${_name}.cpp")
	target_link_libraries(test_${folder}_${_name} ${EMP-OT_LIBRARIES} emp-zk)
endmacro()

macro (add_test_case folder _name)
	add_test_executable_with_lib(${folder} ${_name})
  	add_test(NAME ${folder}_${_name} COMMAND "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_${folder}_${_name}" WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/")
endmacro()

macro (add_test_case_with_run folder _name)
	add_test_executable_with_lib(${folder} ${_name})
	add_test(NAME ${folder}_${_name} COMMAND "./run" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_${folder}_${_name}" WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/")

endmacro()

# Test cases
add_test_case_with_run(arith Mys_exp_exact)
add_test_case_with_run(arith Mys_div)
add_test_case_with_run(arith Mys_rsqrt)
add_test_case_with_run(arith Mys_softmax)
add_test_case_with_run(arith Mys_truncation)
add_test_case_with_run(arith Mys_relu)
add_test_case_with_run(arith Mys_layernorm)
add_test_case_with_run(arith Mys_gelu)
add_test_case_with_run(arith Mys_maxpool)
add_test_case_with_run(arith Mys_sigmoid)


add_test_case_with_run(math LUT)
add_test_case_with_run(math LUTRange)
add_test_case_with_run(math positiveDigDecAny)
add_test_case_with_run(math positiveTruncation)
add_test_case_with_run(math generalTruncation)
add_test_case_with_run(math max)
add_test_case_with_run(math msnzb)
add_test_case_with_run(math extend)
add_test_case_with_run(math exp)
add_test_case_with_run(math div)
add_test_case_with_run(math rsqrt)
add_test_case_with_run(math softmax)
add_test_case_with_run(math layernorm)
add_test_case_with_run(math cmpRealVrfyPositive)
add_test_case_with_run(math cmpRealVrfyP)
add_test_case_with_run(math cmpRealPositive)
add_test_case_with_run(math relu)
add_test_case_with_run(math gelu)
add_test_case_with_run(math sigmoid)